entity AppUser(app_user) {
    login String required
    name String required
    phoneNumber String required
    countryCode String required
    secret String required
    active Boolean required
    dateCreated Instant required
}

entity Member {
    name String required
    federationId Long required
    fedimintId String
    userId Long required
    phoneNumber String required
    countryCode String required
    active Boolean required
    guardian Boolean required
    dateCreated Instant required
}

entity Guardian {
    memberId Long required
    nodeNumber Integer required
    secret Integer required
    invitationSent Boolean required
    invitationAccepted Boolean required
}

entity Federation {
    name String required
    fedimintId String
    numberOfNode Integer required
    basePort Long
    numberOfRegisteredNode Integer required
    createdBy Long
    active Boolean required
    dateCreated Instant required
}

entity FederationMember {
    federationId Long required
    memberId Long required
    active Boolean required
    dateCreated Instant required
}

entity Role(app_role){
  name String required,
  description String required,
  userDefined Boolean required,
  defaultRole Boolean required,
  roleGroup String,
}

entity Privilege(app_privilege) {
  name String required,
  description String required,
  group String
}

entity OtpRequest {
	phoneNumber String required,
	countryCode String required,
	otp String required,
	otpType String required,
    otpLength Integer required,
    status String required,
    dateValidated Instant
}

entity Invite {
	phoneNumber String required,
	countryCode String required,
	invitationCode String required,
	federationId Long required,
    active Boolean required
}

entity Transactions(transactions) {
    federationId Long required,
    memberId String,
    receiverId String
    amountInSat Long required ,
    description String required,
    drcr DRCR required,
    transactionId String required,
    transactionDate Instant required,
    transactionType TransactionType required,
}

enum TransactionType {
    ON_MINT,
    OFF_MINT
}

enum DRCR{
    DR, CR
}


relationship ManyToMany{
    AppUser {authorities(name)} to Role {users},
    Role {authorities(name)} to Privilege {roles}
}


// Set pagination options
paginate * with pagination

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix

filter *
